from flask import Flask, request, jsonify
from flask_cors import CORS
import openai
import os
import logging

# Kh·ªüi t·∫°o Flask app
app = Flask(__name__)
CORS(app)

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)

# L·∫•y API Key t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
openai.api_key = os.getenv("OPENAI_API_KEY")

# M·∫∑c ƒë·ªãnh d√πng model gpt-3.5-turbo, c√≥ th·ªÉ ch·ªânh sau n√†y
DEFAULT_MODEL = "ft:gpt-3.5-turbo-0125:personal::BLnytmJ2"

@app.route('/chatbot', methods=['POST'])
def chatbot():
    try:
        user_message = request.json.get('message', '').strip()
        if not user_message:
            return jsonify({"reply": "Kh√¥ng c√≥ n·ªôi dung ƒë·ªÉ x·ª≠ l√Ω."}), 400

        logging.info(f"User message: {user_message}")

        response = openai.ChatCompletion.create(
            model=DEFAULT_MODEL,
            messages=[
                {"role": "system", "content": "B·∫°n l√† m·ªôt chatbot t∆∞ v·∫•n ngh·ªÅ nghi·ªáp d·ªÖ th∆∞∆°ng, h√†i h∆∞·ªõc v√† th√¢n thi·ªán."},
                {"role": "user", "content": user_message}
            ]
        )

        reply = response.choices[0].message['content'].strip()
        logging.info(f"Bot reply: {reply}")
        return jsonify({"reply": reply})

    except Exception as e:
        logging.error(f"L·ªói khi g·ªçi OpenAI: {e}")
        return jsonify({"reply": "Xin l·ªói, ƒë√£ x·∫£y ra l·ªói. Vui l√≤ng th·ª≠ l·∫°i sau üò•"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
